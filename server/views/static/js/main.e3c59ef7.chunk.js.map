{"version":3,"sources":["chathandler.ts","components/login.tsx","components/chat.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChatHandlerGo","socket","_state","WebSocket","window","location","host","reload","emit","onopen","onclose","onmessage","message","data","JSON","parse","console","log","stringify","type","on","user","state","users","push","filter","u","this","v","undefined","readyState","OPEN","packet","send","username","password","content","EventEmitter","Error","withStyles","root","color","Typography","LoginForm","props","error","chathandler","setState","Grid","container","spacing","direction","alignItems","justifyContent","style","minHeight","Paper","elevation","padding","height","width","margin","onSubmit","e","preventDefault","requestLogin","TextField","label","value","onChange","target","fullWidth","required","FormControlLabel","control","Checkbox","name","Button","variant","React","Component","ChatMessage","sender","Chat","input","messages","appendMessage","bind","appendAnnouncement","map","i","item","sendMessage","setInput","id","endIcon","Send","App","authenticated","connected","CircularProgress","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3c59ef7.chunk.js","sourcesContent":["import { EventEmitter } from \"events\";\r\nimport io, { Socket } from \"socket.io-client\";\r\n\r\ninterface IntroductionPacket {\r\n  username: string;\r\n  users: string[];\r\n  time: string;\r\n}\r\n\r\ninterface ChatState {\r\n  username: string;\r\n  users: string[];\r\n}\r\n\r\ninterface MessagePacket {\r\n  sender: string;\r\n  content: string;\r\n}\r\n\r\nexport default interface IChatHandler extends EventEmitter {\r\n  get state(): ChatState | undefined;\r\n  set state(v: ChatState | undefined);\r\n  get connected(): boolean;\r\n  get authenticated(): boolean;\r\n\r\n  requestLogin(username: string, password: string): void;\r\n  sendMessage(content: string): void;\r\n}\r\n\r\nexport class ChatHandlerGo extends EventEmitter implements IChatHandler {\r\n  private socket: WebSocket;\r\n  private _state: ChatState | undefined;\r\n\r\n  public get state(): ChatState | undefined {\r\n    return this._state;\r\n  }\r\n\r\n  private set state(v: ChatState | undefined) {\r\n    this._state = v;\r\n  }\r\n\r\n  public get authenticated(): boolean {\r\n    return this.state !== undefined;\r\n  }\r\n\r\n  public get connected(): boolean {\r\n    return this.socket && this.socket.readyState == this.socket.OPEN;\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.socket = new WebSocket(`ws://${window.location.host}/ws`);\r\n\r\n    const reload = () => this.emit(\"reload\");\r\n\r\n    this.socket.onopen = reload;\r\n    this.socket.onclose = reload;\r\n\r\n    this.socket.onmessage = (message) => {\r\n      const data = JSON.parse(message[\"data\"]);\r\n      console.log(`received ${JSON.stringify(data)}`);\r\n      if (data.type) this.emit(data.type, data.data);\r\n    };\r\n\r\n    this.on(\"welcome\", (data: IntroductionPacket) => {\r\n      this._state = data;\r\n      reload();\r\n    });\r\n\r\n    this.on(\"user-join\", (data: any) => {\r\n      const { user } = data;\r\n      this.emit(\"announcement\", `${user} has joined the chat!`);\r\n\r\n      this.state?.users.push(user);\r\n      this.emit(\"reload\");\r\n    });\r\n\r\n    this.on(\"user-leave\", (data: any) => {\r\n      const { user } = data;\r\n      this.emit(\"announcement\", `${user} has left the chat!`);\r\n\r\n      if (!this.state) return;\r\n\r\n      this.state.users = this.state?.users.filter((u) => u !== user);\r\n      this.emit(\"reload\");\r\n    });\r\n  }\r\n\r\n  send(type: string, data?: object) {\r\n    const packet = { type, data };\r\n    this.socket.send(JSON.stringify(packet));\r\n  }\r\n\r\n  requestLogin(username: string, password: string) {\r\n    this.send(\"login-request\", { username, password });\r\n  }\r\n\r\n  sendMessage(content: string) {\r\n    this.send(\"chat-message\", { content });\r\n  }\r\n}\r\n\r\nexport class ChatHandlerSIO extends EventEmitter implements IChatHandler {\r\n  private socket: Socket;\r\n  private _state: ChatState | undefined;\r\n\r\n  public get state(): ChatState | undefined {\r\n    return this._state;\r\n  }\r\n\r\n  private set state(v: ChatState | undefined) {\r\n    this._state = v;\r\n  }\r\n\r\n  public get connected(): boolean {\r\n    return this.socket && this.socket.active;\r\n  }\r\n\r\n  public get authenticated(): boolean {\r\n    return this.state !== undefined;\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.socket = io(`http://${window.location.host.split(\":\")[0]}:3001`);\r\n\r\n    this.socket.on(\"connect\", () => this.emit(\"reload\"));\r\n    this.socket.on(\"disconnect\", () => this.emit(\"reload\"));\r\n\r\n    this.socket.on(\"welcome\", (data: IntroductionPacket) => {\r\n      this.state = data;\r\n      this.emit(\"reload\");\r\n    });\r\n\r\n    this.socket.on(\"incorrect-password\", () => this.emit(\"incorrect-password\"));\r\n\r\n    this.socket.on(\"chat-message\", (data: MessagePacket) => {\r\n      if (this.state) this.emit(\"chat-message\", data);\r\n    });\r\n\r\n    this.socket.on(\"user-join\", (user: string) => {\r\n      this.emit(\"announcement\", `${user} has joined the chat!`);\r\n\r\n      this.state?.users.push(user);\r\n      this.emit(\"reload\");\r\n    });\r\n\r\n    this.socket.on(\"user-leave\", (user: string) => {\r\n      this.emit(\"announcement\", `${user} has left the chat!`);\r\n\r\n      if (!this.state) return;\r\n\r\n      this.state.users = this.state?.users.filter((u) => u !== user);\r\n      this.emit(\"reload\");\r\n    });\r\n  }\r\n\r\n  requestLogin(username: string, password: string) {\r\n    this.socket.emit(\"login-request\", { username, password });\r\n  }\r\n\r\n  sendMessage(content: string) {\r\n    this.socket.emit(\"chat-message\", content);\r\n  }\r\n}\r\n","import {\r\n  Grid,\r\n  Paper,\r\n  TextField,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  Button,\r\n  Typography,\r\n  withStyles,\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport ChatHandler from \"../chathandler\";\r\n\r\nconst Error = withStyles({\r\n  root: {\r\n    color: \"#ff0000\",\r\n  },\r\n})(Typography);\r\n\r\ninterface LoginProps {\r\n  chathandler: ChatHandler;\r\n}\r\n\r\ninterface LoginState {\r\n  username: string;\r\n  password: string;\r\n  error: string;\r\n}\r\n\r\nexport default class LoginForm extends React.Component<LoginProps, LoginState> {\r\n  constructor(props: LoginProps) {\r\n    super(props);\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n      error: \"\",\r\n    };\r\n    this.props.chathandler.on(\"incorrect-password\", () => {\r\n      this.setState({\r\n        username: this.state.username,\r\n        password: \"\",\r\n        error: \"Your password is incorrect!\",\r\n      });\r\n    });\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    const paperStyle = {\r\n      padding: 50,\r\n      height: 320,\r\n      width: 320,\r\n      margin: \"20px auto\",\r\n    };\r\n\r\n    return (\r\n      <Grid\r\n        container\r\n        spacing={0}\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        style={{ minHeight: \"100vh\" }}\r\n      >\r\n        <Paper elevation={10} style={paperStyle}>\r\n          <h2>LAET Chat - Sign In</h2>\r\n\r\n          <form\r\n            onSubmit={(e) => {\r\n              e.preventDefault();\r\n              const { username, password } = this.state;\r\n              this.props.chathandler.requestLogin(username, password);\r\n            }}\r\n          >\r\n            <TextField\r\n              label=\"Username\"\r\n              value={this.state.username}\r\n              onChange={(e) =>\r\n                this.setState({\r\n                  username: e.target.value,\r\n                  password: this.state.password,\r\n                  error: \"\",\r\n                })\r\n              }\r\n              fullWidth\r\n              required\r\n            ></TextField>\r\n            <TextField\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              value={this.state.password}\r\n              onChange={(e) =>\r\n                this.setState({\r\n                  username: this.state.username,\r\n                  password: e.target.value,\r\n                  error: \"\",\r\n                })\r\n              }\r\n              fullWidth\r\n              required\r\n            ></TextField>\r\n            <FormControlLabel\r\n              control={<Checkbox name=\"checkedB\" color=\"primary\" />}\r\n              label=\"Remember me\"\r\n            />\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\r\n              Sign In\r\n            </Button>{\" \"}\r\n            {this.state.error ? <Error>{this.state.error}</Error> : <></>}\r\n          </form>\r\n        </Paper>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n","import { Button, Grid, TextField, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { Send } from \"@material-ui/icons\";\r\nimport ChatHandler from \"../chathandler\";\r\n\r\ninterface Message {\r\n  sender: string;\r\n  content: string;\r\n}\r\n\r\nconst ChatMessage = (props: Message) => (\r\n  <Typography>\r\n    <b>{props.sender}</b>: {props.content}\r\n  </Typography>\r\n);\r\n\r\ninterface ChatState {\r\n  input: string;\r\n  messages: JSX.Element[];\r\n}\r\n\r\ninterface ChatProps {\r\n  chathandler: ChatHandler;\r\n}\r\n\r\nexport default class Chat extends React.Component<ChatProps, ChatState> {\r\n  constructor(props: ChatProps) {\r\n    super(props);\r\n\r\n    this.state = { input: \"\", messages: [] };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.chathandler.on(\"chat-message\", this.appendMessage.bind(this));\r\n    this.props.chathandler.on(\"announcement\", this.appendAnnouncement.bind(this));\r\n  }\r\n\r\n  private appendMessage(message: Message) {\r\n    let { input, messages } = this.state;\r\n    const { sender, content } = message;\r\n    messages.push(<ChatMessage sender={sender} content={content} />);\r\n    this.setState({ input, messages });\r\n  }\r\n\r\n  private appendAnnouncement(content: string) {\r\n    let { input, messages } = this.state;\r\n    messages.push(<Typography><b>{content}</b></Typography>)\r\n    this.setState({ input, messages })\r\n  }\r\n\r\n  private setInput(input: string) {\r\n    this.setState({ input, messages: this.state.messages });\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    const buttonStyle = {\r\n      width: 80,\r\n      height: 50,\r\n    };\r\n\r\n    return (\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        spacing={0}\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n      >\r\n        {this.state.messages.map((e, i) => <Grid item key={i}> {e} </Grid>)}\r\n        <form\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            const { input } = this.state;\r\n            this.props.chathandler.sendMessage(input);\r\n            this.setInput(\"\");\r\n          }}\r\n        >\r\n          <Grid item>\r\n            <TextField\r\n              id=\"outlined-basic\"\r\n              label=\"Message\"\r\n              value={this.state.input}\r\n              variant=\"outlined\"\r\n              onChange={(e) => this.setInput(e.target.value)}\r\n            />\r\n            <Button\r\n              variant=\"contained\"\r\n              type=\"submit\"\r\n              color=\"primary\"\r\n              style={buttonStyle}\r\n              endIcon={<Send />}\r\n            >\r\n              Send\r\n            </Button>\r\n          </Grid>\r\n        </form>\r\n      </Grid >\r\n    );\r\n  }\r\n}\r\n","import ChatHandler, { ChatHandlerSIO, ChatHandlerGo } from \"./chathandler\";\r\nimport LoginForm from \"./components/login\";\r\nimport { CircularProgress, Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Chat from \"./components/chat\";\r\n\r\nconst chathandler: ChatHandler = new ChatHandlerGo();\r\n\r\ninterface AppState {\r\n  authenticated: boolean;\r\n  connected: boolean;\r\n}\r\n\r\nexport default class App extends React.Component<{}, AppState> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = { authenticated: false, connected: false };\r\n  }\r\n\r\n  componentDidMount() {\r\n    chathandler.on(\"reload\", this.reload.bind(this));\r\n  }\r\n\r\n  reload() {\r\n    const { authenticated, connected } = chathandler;\r\n    this.setState({ authenticated, connected });\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    if (!this.state.connected) {\r\n      return (\r\n        <Grid\r\n          container\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n          spacing={0}\r\n          direction=\"column\"\r\n          style={{ minHeight: \"100vh\" }}\r\n        >\r\n          <CircularProgress />\r\n        </Grid>\r\n      );\r\n    }\r\n\r\n    if (!this.state.authenticated) {\r\n      return <LoginForm chathandler={chathandler} />;\r\n    }\r\n\r\n    return <Chat chathandler={chathandler} />;\r\n  }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}